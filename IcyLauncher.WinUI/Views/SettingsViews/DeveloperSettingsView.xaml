<Page
    x:Class="IcyLauncher.WinUI.Views.DeveloperSettingsView"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:ex="using:CommunityToolkit.WinUI.UI"
    xmlns:hlprs="using:IcyLauncher.Helpers"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:md="using:CommunityToolkit.WinUI.UI.Media"
    xmlns:mdls="using:IcyLauncher.Data.Models"
    xmlns:media="using:CommunityToolkit.WinUI.UI.Media"
    xmlns:xmle="using:IcyLauncher.Xaml.Elements"
    Background="Transparent"
    Loaded="{x:Bind viewModel.OnPageLoaded}"
    NavigationCacheMode="Disabled"
    mc:Ignorable="d">
    <Page.Resources>
        <md:AttachedCardShadow
            x:Key="CardShadow"
            BlurRadius="40"
            CornerRadius="8"
            Opacity="0.3"
            Offset="0,10,0" />

        <x:Boolean x:Key="par0">False</x:Boolean>
        <x:Boolean x:Key="par1">True</x:Boolean>
    </Page.Resources>

    <TabView
        Margin="12,0"
        VerticalAlignment="Stretch"
        AllowDrop="False"
        AllowDropTabs="False"
        CanDrag="False"
        CanDragTabs="False"
        CanReorderTabs="False"
        IsAddTabButtonVisible="True">

        <TabViewItem
            Header="ILogger&lt;SampleClass&gt;"
            IsClosable="False"
            ToolTipService.ToolTip="Service to log everything">
            <ScrollViewer Padding="0,0,0,12" VerticalAlignment="Stretch">
                <StackPanel Spacing="8">
                    <ContentControl Tag="Show Logger|Create a new window and hook all new logger events" Template="{StaticResource SettingsCard}">
                        <Button Command="{x:Bind viewModel.Logger_ShowCommand}" Content="Show Logger" />
                    </ContentControl>

                    <Expander
                        HorizontalAlignment="Stretch"
                        VerticalAlignment="Top"
                        Header="Log()|Logs any message or exception to the console and writes it to a local text file"
                        Template="{StaticResource CardExpander}">
                        <Expander.Tag>
                            <StackPanel Spacing="8">
                                <ContentControl Tag="message|[Type: object]" Template="{StaticResource SettingsCard}">
                                    <TextBox
                                        Width="400"
                                        PlaceholderText="Message..."
                                        Text="{x:Bind viewModel.Logger_message, Mode=TwoWay}" />
                                </ContentControl>
                                <ContentControl Tag="exception|[optional: null] [Type: Exception?]" Template="{StaticResource SettingsCard}">
                                    <TextBox
                                        Width="400"
                                        PlaceholderText="Exception..."
                                        Text="{x:Bind viewModel.Logger_exception, Mode=TwoWay}" />
                                </ContentControl>
                                <ContentControl Tag="logLevel|] [optional: Information] [Type: LogLevel]" Template="{StaticResource SettingsCard}">
                                    <ComboBox
                                        Width="125"
                                        PlaceholderText="Log Level..."
                                        SelectedIndex="{x:Bind viewModel.Logger_logLevel, Mode=TwoWay, Converter={StaticResource EnumIntConverter}}">
                                        <ComboBoxItem Content="Trace" />
                                        <ComboBoxItem Content="Debug" />
                                        <ComboBoxItem Content="Information" />
                                        <ComboBoxItem Content="Warning" />
                                        <ComboBoxItem Content="Error" />
                                        <ComboBoxItem Content="Critical" />
                                    </ComboBox>
                                </ContentControl>
                                <ContentControl Tag="filePath|[CallerFilePath] [optional: &quot;&quot;] [Type: string]" Template="{StaticResource SettingsCard}">
                                    <TextBox
                                        Width="200"
                                        PlaceholderText="File Path..."
                                        Text="{x:Bind viewModel.Logger_filePath, Mode=TwoWay}" />
                                </ContentControl>
                                <ContentControl Tag="memberName|[CallerMemberName] [optional: &quot;&quot;] [Type: string]" Template="{StaticResource SettingsCard}">
                                    <TextBox
                                        Width="200"
                                        PlaceholderText="File Path..."
                                        Text="{x:Bind viewModel.Logger_memberName, Mode=TwoWay}" />
                                </ContentControl>
                            </StackPanel>
                        </Expander.Tag>

                        <Button Command="{x:Bind viewModel.Logger_TestCommand}" Content="Test Method" />
                    </Expander>

                </StackPanel>
            </ScrollViewer>
        </TabViewItem>

        <TabViewItem
            Header="ConfigurationManager"
            IsClosable="False"
            ToolTipService.ToolTip="Manager of the current configuration">
            <Grid Padding="0,0,0,12">
                <Grid.RowDefinitions>
                    <RowDefinition Height="*" />
                    <RowDefinition Height="8" />
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="8" />
                    <RowDefinition Height="Auto" />
                </Grid.RowDefinitions>

                <TextBox
                    Height="Auto"
                    VerticalAlignment="Stretch"
                    AcceptsReturn="True"
                    PlaceholderText="Configuration..."
                    ScrollViewer.VerticalScrollBarVisibility="Visible"
                    Text="{x:Bind viewModel.ConfigurationManager_currentConfig, Mode=TwoWay}" />

                <ContentControl
                    Grid.Row="2"
                    Tag="Export()|[Returns: string]  Exports the current configuration as a string"
                    Template="{StaticResource SettingsCard}">
                    <Button Command="{x:Bind viewModel.ConfigurationManager_ExportCommand}" Content="Test Method" />
                </ContentControl>

                <Expander
                    Grid.Row="4"
                    HorizontalAlignment="Stretch"
                    VerticalAlignment="Top"
                    Header="Load()|Loads a configuration as the current configuration"
                    Template="{StaticResource CardExpander}">
                    <Expander.Tag>
                        <StackPanel Spacing="8">
                            <ContentControl Tag="input|[Type: Configuration]  The configuration which should get loaded" Template="{StaticResource SettingsCard}">
                                <Button Content="Set Configuration" IsEnabled="False" />
                            </ContentControl>
                            <ContentControl Tag="ignoreTheme|[Type: bool] The boolean wether the theme should be ignored while loading" Template="{StaticResource SettingsCard}">
                                <ToggleSwitch IsOn="{x:Bind viewModel.ConfigurationManager_ignoreTheme, Mode=TwoWay}" />
                            </ContentControl>
                        </StackPanel>
                    </Expander.Tag>

                    <Button Command="{x:Bind viewModel.ConfigurationManager_LoadCommand}" Content="Test Method" />
                </Expander>
            </Grid>
        </TabViewItem>

        <TabViewItem
            Header="ThemeManager"
            IsClosable="False"
            ToolTipService.ToolTip="Manager of the current therme">
            <ScrollViewer Padding="0,0,0,12" VerticalAlignment="Stretch">
                <StackPanel Spacing="8">
                    <ContentControl Tag="Colors|The current theme" Template="{StaticResource SettingsCard}">
                        <Button Content="configuration.Apperance.Colors" IsEnabled="False" />
                    </ContentControl>

                    <TextBox
                        VerticalAlignment="Top"
                        IsEnabled="False"
                        PlaceholderText="Theme..." />

                    <ContentControl Tag="Export()|[Returns: string]  Exports the current theme as a string" Template="{StaticResource SettingsCard}">
                        <Button Content="Test Method" IsEnabled="False" />
                    </ContentControl>

                    <Expander
                        HorizontalAlignment="Stretch"
                        VerticalAlignment="Top"
                        Header="Load()|Loads a theme as the current theme"
                        Template="{StaticResource CardExpander}">
                        <Expander.Tag>
                            <StackPanel Spacing="8">
                                <ContentControl Tag="input|[Type: Theme]  The theme which should get loaded" Template="{StaticResource SettingsCard}">
                                    <ToggleSwitch IsEnabled="False" />
                                </ContentControl>
                                <ContentControl Tag="ignoreAccent|[Type: bool]  The boolean wether the accent should be ignored while loading" Template="{StaticResource SettingsCard}">
                                    <ToggleSwitch IsEnabled="False" />
                                </ContentControl>
                            </StackPanel>
                        </Expander.Tag>

                        <Button Content="Test Method" IsEnabled="False" />
                    </Expander>

                    <ContentControl Tag="RandomizeTheme()|Randomizes every color of the current theme. Use for debugging only" Template="{StaticResource SettingsCard}">
                        <Button Command="{x:Bind viewModel.ThemeManager_RandomizeThemeCommand}" Content="Test Method" />
                    </ContentControl>

                    <Expander
                        HorizontalAlignment="Stretch"
                        VerticalAlignment="Top"
                        Header="GetRandomColor()|[Returns: Color]  Generates a random color"
                        Template="{StaticResource CardExpander}">
                        <Expander.Tag>
                            <ContentControl Tag="transparency|[optional: 255] [Type: byte?]  The transparency which the color should have" Template="{StaticResource SettingsCard}">
                                <NumberBox
                                    Maximum="255"
                                    Minimum="0"
                                    SpinButtonPlacementMode="Compact"
                                    Value="{x:Bind viewModel.ThemeManager_transparency, Mode=TwoWay}" />
                            </ContentControl>
                        </Expander.Tag>

                        <StackPanel Orientation="Horizontal" Spacing="8">
                            <ColorPicker
                                Margin="0,0,-117,0"
                                IsHitTestVisible="False"
                                Template="{StaticResource ColorPickerButton}"
                                Color="{x:Bind viewModel.ThemeManager_randomColor, Mode=OneWay}" />
                            <Button Command="{x:Bind viewModel.ThemeManager_GetRandomColorCommand}" Content="Test Method" />
                        </StackPanel>
                    </Expander>

                    <ContentControl Tag="SetResourceColors()|Sets resource colors from current theme" Template="{StaticResource SettingsCard}">
                        <Button Command="{x:Bind viewModel.ThemeManager_SetResourceColorsCommand}" Content="Test Method" />
                    </ContentControl>

                    <ContentControl Tag="SetUnbindableBindings()|Binds non-bindable properties of UIElementReciever elements to their respected colors" Template="{StaticResource SettingsCard}">
                        <Button Command="{x:Bind viewModel.ThemeManager_SetUnbindableBindingsCommand}" Content="Test Method" />
                    </ContentControl>
                </StackPanel>
            </ScrollViewer>
        </TabViewItem>

        <TabViewItem
            Header="AppStartupHandler"
            IsClosable="False"
            IsEnabled="False"
            ToolTipService.ToolTip="Handler which configures the entire application on startup" />

        <TabViewItem
            Header="WindowHandler"
            IsClosable="False"
            ToolTipService.ToolTip="Handler to configure the current main window">
            <ScrollViewer VerticalAlignment="Stretch">
                <StackPanel Padding="0,0,0,12" Spacing="8">
                    <ContentControl Tag="HWnd|[Type: IntPtr]  HWND of the current main window" Template="{StaticResource SettingsCard}">
                        <StackPanel Orientation="Horizontal" Spacing="8">
                            <TextBox IsHitTestVisible="False" Text="{x:Bind viewModel.WindowHandler_hWnd, Mode=OneWay}" />
                            <Button Command="{x:Bind viewModel.WindowHandler_UpdateHWndCommand}" Content="Update" />
                        </StackPanel>
                    </ContentControl>

                    <ContentControl Tag="HasCustomTitleBar|[Type: bool]  Boolean wether the current main window has a custom title bar" Template="{StaticResource SettingsCard}">
                        <StackPanel Orientation="Horizontal" Spacing="8">
                            <ToggleSwitch IsHitTestVisible="False" IsOn="{x:Bind viewModel.WindowHandler_hasCustomTitleBar, Mode=OneWay}" />
                            <Button Command="{x:Bind viewModel.WindowHandler_UpdateHasCustomTitlebarCommand}" Content="Update" />
                        </StackPanel>
                    </ContentControl>

                    <ContentControl Tag="Size|[Type: SizeInt32]  Size of the current main window" Template="{StaticResource SettingsCard}">
                        <StackPanel Orientation="Horizontal" Spacing="8">
                            <TextBox IsHitTestVisible="False" Text="{x:Bind viewModel.WindowHandler_size, Mode=OneWay}" />
                            <Button Command="{x:Bind viewModel.WindowHandler_UpdateSizeCommand}" Content="Update" />
                        </StackPanel>
                    </ContentControl>

                    <ContentControl Tag="Position|[Type: PointInt32]  Position of the current main window" Template="{StaticResource SettingsCard}">
                        <StackPanel Orientation="Horizontal" Spacing="8">
                            <TextBox IsHitTestVisible="False" Text="{x:Bind viewModel.WindowHandler_position, Mode=OneWay}" />
                            <Button Command="{x:Bind viewModel.WindowHandler_UpdatePositionCommand}" Content="Update" />
                        </StackPanel>
                    </ContentControl>

                    <ContentControl Tag="ScreenSize|[Type: RectInt32]  Size of the current main screen" Template="{StaticResource SettingsCard}">
                        <StackPanel Orientation="Horizontal" Spacing="8">
                            <TextBox IsHitTestVisible="False" Text="{x:Bind viewModel.WindowHandler_screenSize, Mode=OneWay}" />
                            <Button Command="{x:Bind viewModel.WindowHandler_UpdateScreenSizeCommand}" Content="Update" />
                        </StackPanel>
                    </ContentControl>

                    <ContentControl Tag="LoggerWindow|[Type: Window?]  Active logger window (null if none is active)" Template="{StaticResource SettingsCard}">
                        <Button Content="Show Logger" IsEnabled="False" />
                    </ContentControl>

                    <Expander
                        HorizontalAlignment="Stretch"
                        VerticalAlignment="Top"
                        Header="SetIcon()|Sets a custom icon on the current main window"
                        Template="{StaticResource CardExpander}">
                        <Expander.Tag>
                            <ContentControl Tag="path|[Type: string]  The file path to the icon" Template="{StaticResource SettingsCard}">
                                <TextBox
                                    Name="WindowHandler_IconPath"
                                    Width="400"
                                    PlaceholderText="Path..." />
                            </ContentControl>
                        </Expander.Tag>

                        <Button
                            Command="{x:Bind viewModel.WindowHandler_SetIconCommand}"
                            CommandParameter="{Binding Text, ElementName=WindowHandler_IconPath}"
                            Content="Test Method" />
                    </Expander>

                    <Expander
                        HorizontalAlignment="Stretch"
                        VerticalAlignment="Top"
                        Header="SetSize()|Sets the size of the current main window"
                        Template="{StaticResource CardExpander}">
                        <Expander.Tag>
                            <StackPanel Spacing="8">
                                <ContentControl Tag="externalWindow|[optional: Window] [Type: Window?]  The window to set the size to" Template="{StaticResource SettingsCard}">
                                    <Button Content="Set Window" IsEnabled="False" />
                                </ContentControl>

                                <ContentControl Tag="width|[Type: int]  The width of the new size" Template="{StaticResource SettingsCard}">
                                    <NumberBox SpinButtonPlacementMode="Compact" Value="{x:Bind viewModel.WindowHandler_sizeWidth, Mode=TwoWay}" />
                                </ContentControl>

                                <ContentControl Tag="height|[Type: int]  The height of the new size" Template="{StaticResource SettingsCard}">
                                    <NumberBox SpinButtonPlacementMode="Compact" Value="{x:Bind viewModel.WindowHandler_sizeHeight, Mode=TwoWay}" />
                                </ContentControl>
                            </StackPanel>
                        </Expander.Tag>

                        <Button Command="{x:Bind viewModel.WindowHandler_SetSizeCommand}" Content="Test Method" />
                    </Expander>

                    <Expander
                        HorizontalAlignment="Stretch"
                        VerticalAlignment="Top"
                        Header="SetMinSize()|[experimental]  Sets the minimum size of the current main window"
                        Template="{StaticResource CardExpander}">
                        <Expander.Tag>
                            <StackPanel Spacing="8">
                                <ContentControl Tag="width|[Type: int]  The width of the new size" Template="{StaticResource SettingsCard}">
                                    <NumberBox SpinButtonPlacementMode="Compact" Value="{x:Bind viewModel.WindowHandler_minSizeWidth, Mode=TwoWay}" />
                                </ContentControl>

                                <ContentControl Tag="height|[Type: int]  The height of the new size" Template="{StaticResource SettingsCard}">
                                    <NumberBox SpinButtonPlacementMode="Compact" Value="{x:Bind viewModel.WindowHandler_minSizeHeight, Mode=TwoWay}" />
                                </ContentControl>
                            </StackPanel>
                        </Expander.Tag>

                        <Button Command="{x:Bind viewModel.WindowHandler_SetMinSizeCommand}" Content="Test Method" />
                    </Expander>

                    <Expander
                        HorizontalAlignment="Stretch"
                        VerticalAlignment="Top"
                        Header="SetPosition()|Sets the position of the current main window"
                        Template="{StaticResource CardExpander}">
                        <Expander.Tag>
                            <StackPanel Spacing="8">
                                <ContentControl Tag="x|[Type: int]  The x coordinate of the new size" Template="{StaticResource SettingsCard}">
                                    <NumberBox SpinButtonPlacementMode="Compact" Value="{x:Bind viewModel.WindowHandler_positionX, Mode=TwoWay}" />
                                </ContentControl>

                                <ContentControl Tag="y|[Type: int]  The y coordinate of the new size" Template="{StaticResource SettingsCard}">
                                    <NumberBox SpinButtonPlacementMode="Compact" Value="{x:Bind viewModel.WindowHandler_positionY, Mode=TwoWay}" />
                                </ContentControl>
                            </StackPanel>
                        </Expander.Tag>

                        <Button Command="{x:Bind viewModel.WindowHandler_SetPositionCommand}" Content="Test Method" />
                    </Expander>

                    <ContentControl Tag="SetPositionToCenter()|Sets the position of the current main window to the center of the main screen" Template="{StaticResource SettingsCard}">
                        <Button Command="{x:Bind viewModel.WindowHandler_SetPositionToCenterCommand}" Content="Test Method" />
                    </ContentControl>

                    <Expander
                        HorizontalAlignment="Stretch"
                        VerticalAlignment="Top"
                        Header="Register()|Initializes a target with the current main window"
                        Template="{StaticResource CardExpander}">
                        <Expander.Tag>
                            <ContentControl Tag="target|[Type: object]  The target to register" Template="{StaticResource SettingsCard}">
                                <Button Content="Set Target" IsEnabled="False" />
                            </ContentControl>
                        </Expander.Tag>

                        <Button Content="Test Method" IsEnabled="False" />
                    </Expander>

                    <ContentControl Tag="EnsureWindowsSystemDispatcherQueueController()|[Returns: bool]  Ensures there is a windows system dispatcher queue controller" Template="{StaticResource SettingsCard}">
                        <Button Command="{x:Bind viewModel.WindowHandler_EnsureWindowsSystemDispatcherQueueControllerCommand}" Content="Test Method" />
                    </ContentControl>

                    <Expander
                        HorizontalAlignment="Stretch"
                        VerticalAlignment="Top"
                        Header="SetTitleBar()|[Returns: bool]  Sets an UIElement as a custom title bar on the current main window"
                        Template="{StaticResource CardExpander}">
                        <Expander.Tag>
                            <StackPanel Spacing="8">
                                <ContentControl Tag="titleBar|[Type: UIElement?]  The UIElement to set as a title bar" Template="{StaticResource SettingsCard}">
                                    <StackPanel Orientation="Horizontal" Spacing="8">
                                        <Button Content="Set UIElement" IsEnabled="False" />
                                        <ToggleSwitch
                                            IsOn="{x:Bind viewModel.WindowHandler_titleBarIsNull, Mode=TwoWay}"
                                            OffContent="Is Null"
                                            OnContent="Is Null" />
                                    </StackPanel>
                                </ContentControl>

                                <ContentControl Tag="container|[optional: null] [Type: UIElement?]  The container UIElement of the title bar to update visibilies" Template="{StaticResource SettingsCard}">
                                    <StackPanel Orientation="Horizontal" Spacing="8">
                                        <Button Content="Set UIElement" IsEnabled="False" />
                                        <ToggleSwitch
                                            IsOn="{x:Bind viewModel.WindowHandler_titleBarContainerIsNull, Mode=TwoWay}"
                                            OffContent="Is Null"
                                            OnContent="Is Null" />
                                    </StackPanel>
                                </ContentControl>
                            </StackPanel>
                        </Expander.Tag>

                        <Button Command="{x:Bind viewModel.WindowHandler_SetTitleBarCommand}" Content="Test Method" />
                    </Expander>

                    <Expander
                        HorizontalAlignment="Stretch"
                        VerticalAlignment="Top"
                        Header="SetMainBackground()|[Returns: bool]  Sets a binded color as the main background of the current main window"
                        Template="{StaticResource CardExpander}">
                        <Expander.Tag>
                            <ContentControl Tag="backgroundColor|[Type: string]  The property path of themeManager.Colors" Template="{StaticResource SettingsCard}">
                                <TextBox
                                    MinWidth="200"
                                    MaxWidth="300"
                                    Text="{x:Bind viewModel.WindowHandler_mainBackground, Mode=TwoWay}" />
                            </ContentControl>
                        </Expander.Tag>

                        <Button Command="{x:Bind viewModel.WindowHandler_SetMainBackgroundCommand}" Content="Test Method" />
                    </Expander>
                </StackPanel>
            </ScrollViewer>
        </TabViewItem>

        <TabViewItem
            Header="UIElementReciever"
            IsClosable="False"
            ToolTipService.ToolTip="Reciever and caster of all UIElements of the current main window">
            <ScrollViewer VerticalAlignment="Stretch">
                <StackPanel Padding="0,0,0,12" Spacing="8">
                    <ContentControl Tag="MainGrid|[Type: Grid]  The container of the current main window" Template="{StaticResource SettingsCard}">
                        <TextBox IsHitTestVisible="False" Text="{x:Bind viewModel.UIElementReviever_mainGrid, Mode=OneWay}" />
                    </ContentControl>

                    <ContentControl Tag="NavigationView|[Type: NavigationView]  The navigation container of the current main window" Template="{StaticResource SettingsCard}">
                        <TextBox IsHitTestVisible="False" Text="{x:Bind viewModel.UIElementReviever_navigationView, Mode=OneWay}" />
                    </ContentControl>

                    <ContentControl Tag="NavigationFrame|[Type: Frame]  The navigation frame of the current main window" Template="{StaticResource SettingsCard}">
                        <TextBox IsHitTestVisible="False" Text="{x:Bind viewModel.UIElementReviever_navigationFrame, Mode=OneWay}" />
                    </ContentControl>

                    <ContentControl Tag="TitleBarContainer|[Type: Grid]  The container of the custom title bar" Template="{StaticResource SettingsCard}">
                        <TextBox IsHitTestVisible="False" Text="{x:Bind viewModel.UIElementReviever_titleBarContainer, Mode=OneWay}" />
                    </ContentControl>

                    <ContentControl Tag="TitleBar|[Type: StackPanel]  The custom title bar of the current main window" Template="{StaticResource SettingsCard}">
                        <TextBox IsHitTestVisible="False" Text="{x:Bind viewModel.UIElementReviever_titleBar, Mode=OneWay}" />
                    </ContentControl>

                    <ContentControl Tag="TitleBarDragArea|[Type: Grid]  The drag area of the custom title bar" Template="{StaticResource SettingsCard}">
                        <TextBox IsHitTestVisible="False" Text="{x:Bind viewModel.UIElementReviever_titleBarDragArea, Mode=OneWay}" />
                    </ContentControl>

                    <ContentControl Tag="BackButton|[Type: Button]  The navigation back button of the navigation view" Template="{StaticResource SettingsCard}">
                        <TextBox IsHitTestVisible="False" Text="{x:Bind viewModel.UIElementReviever_backButton, Mode=OneWay}" />
                    </ContentControl>

                    <ContentControl Tag="BackButtonIcon|[Type: AnimatedIcon]  The icon of the back button" Template="{StaticResource SettingsCard}">
                        <TextBox IsHitTestVisible="False" Text="{x:Bind viewModel.UIElementReviever_backButtonIcon, Mode=OneWay}" />
                    </ContentControl>

                    <ContentControl Tag="TitleBarIconGradientStops|[Type: GradientStopCollection]  The icon gradient stop collection of the custom title bar" Template="{StaticResource SettingsCard}">
                        <TextBox IsHitTestVisible="False" Text="{x:Bind viewModel.UIElementReviever_titleBarIconGradientStops, Mode=OneWay}" />
                    </ContentControl>

                    <ContentControl Tag="TitleBarTitle|[Type: TextBlock]  The title of the custom title bar" Template="{StaticResource SettingsCard}">
                        <TextBox IsHitTestVisible="False" Text="{x:Bind viewModel.UIElementReviever_titleBarTitle, Mode=OneWay}" />
                    </ContentControl>
                </StackPanel>
            </ScrollViewer>
        </TabViewItem>

        <TabViewItem
            Header="MicaBackdropHandler"
            IsClosable="False"
            ToolTipService.ToolTip="Handler to confgure a mica backdrop effect on the current main window (Win11+)">
            <ScrollViewer VerticalAlignment="Stretch">
                <StackPanel Padding="0,0,0,12" Spacing="8">
                    <ContentControl Tag="EnableBackdrop()|[Returns: bool]  Enables the backdrop effect" Template="{StaticResource SettingsCard}">
                        <Button Command="{x:Bind viewModel.MicaBackdropHandler_EnableBackdropCommand}" Content="Test Method" />
                    </ContentControl>

                    <ContentControl Tag="DisableBackdrop()|[Returns: bool]  Disables the backdrop effect" Template="{StaticResource SettingsCard}">
                        <Button Command="{x:Bind viewModel.MicaBackdropHandler_DisableBackdropCommand}" Content="Test Method" />
                    </ContentControl>

                    <ContentControl Tag="IsDarkModeEnabled|[Type: bool]  Sets and gets the dark mode of the backdrop effect" Template="{StaticResource SettingsCard}">
                        <ToggleSwitch IsOn="{x:Bind viewModel.MicaBackdropHandler_isDarkModeEnabled, Mode=TwoWay}" />
                    </ContentControl>
                </StackPanel>
            </ScrollViewer>
        </TabViewItem>

        <TabViewItem
            Header="AcrylicBackdropHandler"
            IsClosable="False"
            ToolTipService.ToolTip="Handler to confgure an acrylic backdrop effect on the current main window (Win10+)">
            <ScrollViewer VerticalAlignment="Stretch">
                <StackPanel Padding="0,0,0,12" Spacing="8">
                    <ContentControl Tag="EnableBackdrop()|[Returns: bool]  Enables the backdrop" Template="{StaticResource SettingsCard}">
                        <Button Command="{x:Bind viewModel.AcrylicBackdropHandler_EnableBackdropCommand}" Content="Test Method" />
                    </ContentControl>

                    <ContentControl Tag="DisableBackdrop()|[Returns: bool]  Disables the backdrop" Template="{StaticResource SettingsCard}">
                        <Button Command="{x:Bind viewModel.AcrylicBackdropHandler_DisableBackdropCommand}" Content="Test Method" />
                    </ContentControl>

                    <ContentControl Tag="IsDarkModeEnabled|[Type: bool]  Gets and sets the dark mode of the backdrop effect" Template="{StaticResource SettingsCard}">
                        <ToggleSwitch IsOn="{x:Bind viewModel.AcrylicBackdropHandler_isDarkModeEnabled, Mode=TwoWay}" />
                    </ContentControl>
                </StackPanel>
            </ScrollViewer>
        </TabViewItem>

        <TabViewItem
            Header="VibrancyBackdropHandler"
            IsClosable="False"
            ToolTipService.ToolTip="Handler to confgure a vibrancy backdrop effect on the current main window (Win11+)">
            <ScrollViewer VerticalAlignment="Stretch">
                <StackPanel Padding="0,0,0,12" Spacing="8">
                    <ContentControl Tag="EnableBackdrop()|[Returns: bool]  Enables the backdrop effect" Template="{StaticResource SettingsCard}">
                        <Button Command="{x:Bind viewModel.VibrancyBackdropHandler_EnableBackdropCommand}" Content="Test Method" />
                    </ContentControl>

                    <ContentControl Tag="DisableBackdrop()|[Returns: bool]  Disables the backdrop effect" Template="{StaticResource SettingsCard}">
                        <Button Command="{x:Bind viewModel.VibrancyBackdropHandler_DisableBackdropCommand}" Content="Test Method" />
                    </ContentControl>
                </StackPanel>
            </ScrollViewer>
        </TabViewItem>

        <TabViewItem
            Header="BackdropHandler"
            IsClosable="False"
            ToolTipService.ToolTip="Handler to configure all backdrop effects on the current main window">
            <ScrollViewer VerticalAlignment="Stretch">
                <StackPanel Padding="0,0,0,12" Spacing="8">
                    <ContentControl Tag="IsMicaEnabled|[Type: bool]  Boolean wether a mica backdrop effect is enabled" Template="{StaticResource SettingsCard}">
                        <StackPanel Orientation="Horizontal" Spacing="8">
                            <ToggleSwitch IsHitTestVisible="False" IsOn="{x:Bind viewModel.BackdropHandler_isMicaEnabled, Mode=OneWay}" />
                            <Button Command="{x:Bind viewModel.BackdropHandler_UpdateIsMicaEnabledCommand}" Content="Update" />
                        </StackPanel>
                    </ContentControl>

                    <ContentControl Tag="IsAcrylicEnabled|[Type: bool]  Boolean wether an acrylic backdrop effect is enabled" Template="{StaticResource SettingsCard}">
                        <StackPanel Orientation="Horizontal" Spacing="8">
                            <ToggleSwitch IsHitTestVisible="False" IsOn="{x:Bind viewModel.BackdropHandler_isAcrylicEnabled, Mode=OneWay}" />
                            <Button Command="{x:Bind viewModel.BackdropHandler_UpdateIsAcrylicEnabledCommand}" Content="Update" />
                        </StackPanel>
                    </ContentControl>

                    <ContentControl Tag="IsVibrancyEnabled|[Type: bool]  Boolean wether a vivrancy backdrop effect is enabled" Template="{StaticResource SettingsCard}">
                        <StackPanel Orientation="Horizontal" Spacing="8">
                            <ToggleSwitch IsHitTestVisible="False" IsOn="{x:Bind viewModel.BackdropHandler_isVibrancyEnabled, Mode=OneWay}" />
                            <Button Command="{x:Bind viewModel.BackdropHandler_UpdateIsVibrancyEnabledCommand}" Content="Update" />
                        </StackPanel>
                    </ContentControl>

                    <ContentControl Tag="IsNoneEnabled|[Type: bool]  Boolean wether no backdrop effect is enabled" Template="{StaticResource SettingsCard}">
                        <StackPanel Orientation="Horizontal" Spacing="8">
                            <ToggleSwitch IsHitTestVisible="False" IsOn="{x:Bind viewModel.BackdropHandler_isNoneEnabled, Mode=OneWay}" />
                            <Button Command="{x:Bind viewModel.BackdropHandler_UpdateIsNoneEnabledCommand}" Content="Update" />
                        </StackPanel>
                    </ContentControl>

                    <ContentControl Tag="Current|[Type: Backdrop?]  The currently activated backdrop effect" Template="{StaticResource SettingsCard}">
                        <StackPanel Orientation="Horizontal" Spacing="8">
                            <ComboBox
                                Width="110"
                                IsHitTestVisible="False"
                                PlaceholderText="Backdrop..."
                                SelectedIndex="{x:Bind viewModel.BackdropHandler_current, Mode=OneWay, Converter={StaticResource EnumIntConverter}}">
                                <ComboBoxItem Content="Mica" />
                                <ComboBoxItem Content="Acrylic" />
                                <ComboBoxItem Content="Vibrancy" />
                                <ComboBoxItem Content="None" />
                            </ComboBox>
                            <Button Command="{x:Bind viewModel.BackdropHandler_UpdateCurrentCommand}" Content="Update" />
                        </StackPanel>
                    </ContentControl>

                    <Expander
                        HorizontalAlignment="Stretch"
                        VerticalAlignment="Top"
                        Header="SetBackdrop()|[Returns: bool]  Enables/Disables a backdrop effect on the current main window and optionally updates the dark mode"
                        Template="{StaticResource CardExpander}">
                        <Expander.Tag>
                            <StackPanel Spacing="8">
                                <ContentControl Tag="backdrop|[Type: Backdrop]  The backdrop effect to enable/disable" Template="{StaticResource SettingsCard}">
                                    <ComboBox
                                        Width="110"
                                        PlaceholderText="Backdrop..."
                                        SelectedIndex="{x:Bind viewModel.BackdropHandler_backdrop, Mode=TwoWay, Converter={StaticResource EnumIntConverter}}">
                                        <ComboBoxItem Content="Mica" />
                                        <ComboBoxItem Content="Acrylic" />
                                        <ComboBoxItem Content="Vibrancy" />
                                        <ComboBoxItem Content="None" />
                                    </ComboBox>
                                </ContentControl>
                                <ContentControl Tag="enable|[Type: bool]  The boolean wether the backdrop effect should be enabled/disabled" Template="{StaticResource SettingsCard}">
                                    <ToggleSwitch IsOn="{x:Bind viewModel.BackdropHandler_enable, Mode=TwoWay}" />
                                </ContentControl>
                                <ContentControl Tag="useDarkMode|[optional: null] [Type: bool?]  The boolean wether dark mode should be actived" Template="{StaticResource SettingsCard}">
                                    <StackPanel Orientation="Horizontal" Spacing="8">
                                        <ToggleSwitch IsOn="{x:Bind viewModel.BackdropHandler_useDarkMode, Mode=TwoWay}" />
                                        <ToggleSwitch
                                            IsOn="{x:Bind viewModel.BackdropHandler_useDarkModeIsNull, Mode=TwoWay}"
                                            OffContent="Is Null"
                                            OnContent="Is Null" />
                                    </StackPanel>
                                </ContentControl>
                            </StackPanel>
                        </Expander.Tag>

                        <Button Command="{x:Bind viewModel.BackdropHandler_SetBackdropCommand}" Content="Test Method" />
                    </Expander>

                    <Expander
                        HorizontalAlignment="Stretch"
                        VerticalAlignment="Top"
                        Header="SetDarkMode()|Sets wether dark mode should be actived on the given backdrop effect"
                        Template="{StaticResource CardExpander}">
                        <Expander.Tag>
                            <StackPanel Spacing="8">
                                <ContentControl Tag="backdrop|[Type: Backdrop]  The backdrop effect to set the dark mode" Template="{StaticResource SettingsCard}">
                                    <ComboBox
                                        Width="110"
                                        PlaceholderText="Backdrop..."
                                        SelectedIndex="{x:Bind viewModel.BackdropHandler_backdrop, Mode=TwoWay, Converter={StaticResource EnumIntConverter}}">
                                        <ComboBoxItem Content="Mica" />
                                        <ComboBoxItem Content="Acrylic" />
                                        <ComboBoxItem Content="Vibrancy" />
                                        <ComboBoxItem Content="None" />
                                    </ComboBox>
                                </ContentControl>
                                <ContentControl Tag="useDarkMode|[optional: true] [Type: bool]  The boolean wether the backdrop effect should be enabled/disabled" Template="{StaticResource SettingsCard}">
                                    <ToggleSwitch IsOn="{x:Bind viewModel.BackdropHandler_useDarkMode, Mode=TwoWay}" />
                                </ContentControl>
                            </StackPanel>
                        </Expander.Tag>

                        <Button Command="{x:Bind viewModel.BackdropHandler_SetDarkModeCommand}" Content="Test Method" />
                    </Expander>
                </StackPanel>
            </ScrollViewer>
        </TabViewItem>

        <TabViewItem
            Header="IConverter"
            IsClosable="False"
            ToolTipService.ToolTip="Converter which converts strings and objects">
            <ScrollViewer VerticalAlignment="Stretch">
                <StackPanel Padding="0,0,0,12" Spacing="8">
                    <ContentControl Tag="Test Object|[Type: SolidColor]  Exmaple object to test converting" Template="{StaticResource SettingsCard}">
                        <StackPanel Orientation="Horizontal" Spacing="8">
                            <TextBox
                                MinWidth="100"
                                MaxWidth="200"
                                Text="{x:Bind viewModel.IConverter_object.Name, Mode=TwoWay}" />
                            <ColorPicker
                                Margin="0,0,-117,0"
                                Template="{StaticResource ColorPickerButton}"
                                Color="{x:Bind viewModel.IConverter_object.Color, Mode=TwoWay}" />
                        </StackPanel>
                    </ContentControl>

                    <TextBox
                        Height="Auto"
                        MinHeight="100"
                        MaxHeight="200"
                        VerticalAlignment="Top"
                        AcceptsReturn="True"
                        PlaceholderText="Input..."
                        ScrollViewer.VerticalScrollBarVisibility="Visible"
                        Text="{x:Bind viewModel.IConverter_input, Mode=TwoWay}" />

                    <Expander
                        Margin="0,12,0,0"
                        HorizontalAlignment="Stretch"
                        VerticalAlignment="Top"
                        Header="ToString()|[Returns: string]  Converts an object into a string"
                        Template="{StaticResource CardExpander}">
                        <Expander.Tag>
                            <StackPanel Spacing="8">
                                <ContentControl Tag="input|[Type: object]  The object to convert" Template="{StaticResource SettingsCard}">
                                    <Button Content="Set Input" IsEnabled="False" />
                                </ContentControl>
                                <ContentControl Tag="formatting|[optional: null] [Type: object?]  The formatting which will be used to convert the object" Template="{StaticResource SettingsCard}">
                                    <ComboBox
                                        Width="110"
                                        PlaceholderText="Formatting..."
                                        SelectedIndex="{x:Bind viewModel.IConverter_formatting, Mode=TwoWay, Converter={StaticResource EnumIntConverter}}">
                                        <ComboBoxItem Content="None" />
                                        <ComboBoxItem Content="Indented" />
                                    </ComboBox>
                                </ContentControl>
                            </StackPanel>
                        </Expander.Tag>

                        <Button Command="{x:Bind viewModel.IConverter_ToStringCommand}" Content="Test Method" />
                    </Expander>

                    <Expander
                        HorizontalAlignment="Stretch"
                        VerticalAlignment="Top"
                        Header="ToObject&lt;T&gt;()|[Returns: T]  Converts a stirng into an object"
                        Template="{StaticResource CardExpander}">
                        <Expander.Tag>
                            <ContentControl Tag="input|[Type: string]  The string to convert" Template="{StaticResource SettingsCard}">
                                <Button Content="Set Input" IsEnabled="False" />
                            </ContentControl>
                        </Expander.Tag>

                        <Button Command="{x:Bind viewModel.IConverter_ToObjectCommand}" Content="Test Method" />
                    </Expander>

                    <Expander
                        HorizontalAlignment="Stretch"
                        VerticalAlignment="Top"
                        Header="TryToObject&lt;T&gt;()|[Returns: bool]  Tries to convert a string into an object"
                        Template="{StaticResource CardExpander}">
                        <Expander.Tag>
                            <StackPanel Spacing="8">
                                <ContentControl Tag="result|[out] [Type: T?]  The converted converted object of the string" Template="{StaticResource SettingsCard}" />
                                <ContentControl Tag="input|[Type: string]  The string to convert" Template="{StaticResource SettingsCard}">
                                    <Button Content="Set Input" IsEnabled="False" />
                                </ContentControl>
                            </StackPanel>
                        </Expander.Tag>

                        <Button Command="{x:Bind viewModel.IConverter_TryToObjectCommand}" Content="Test Method" />
                    </Expander>
                </StackPanel>
            </ScrollViewer>
        </TabViewItem>

        <TabViewItem
            Header="ImagingUtility"
            IsClosable="False"
            IsEnabled="False"
            ToolTipService.ToolTip="Utility to render and image advanced UI">
            <ScrollViewer VerticalAlignment="Stretch">
                <StackPanel Padding="0,0,0,12" Spacing="8" />
            </ScrollViewer>
        </TabViewItem>

        <TabViewItem
            Header="IFileSystem"
            IsClosable="False"
            ToolTipService.ToolTip="Service to communicate with the local file system">
            <ScrollViewer VerticalAlignment="Stretch">
                <StackPanel Padding="0,0,0,12" Spacing="8">
                    <Expander
                        HorizontalAlignment="Stretch"
                        VerticalAlignment="Top"
                        Header="FileExists()|[Returns: bool]  Checks wether a file exists"
                        Template="{StaticResource CardExpander}">
                        <Expander.Tag>
                            <ContentControl Tag="path|[Type: string]  The path to the file to check" Template="{StaticResource SettingsCard}">
                                <TextBox
                                    MinWidth="400"
                                    MaxWidth="500"
                                    Text="{x:Bind viewModel.IFileSystem_path, Mode=TwoWay}" />
                            </ContentControl>
                        </Expander.Tag>

                        <Button Command="{x:Bind viewModel.IFileSystem_FileExistsCommand}" Content="Test Method" />
                    </Expander>

                    <Expander
                        HorizontalAlignment="Stretch"
                        VerticalAlignment="Top"
                        Header="FileWritable()|[Returns: bool]  Checks wether a file is writeable"
                        Template="{StaticResource CardExpander}">
                        <Expander.Tag>
                            <ContentControl Tag="path|[Type: string]  The path to the file to check" Template="{StaticResource SettingsCard}">
                                <TextBox
                                    MinWidth="400"
                                    MaxWidth="500"
                                    Text="{x:Bind viewModel.IFileSystem_path, Mode=TwoWay}" />
                            </ContentControl>
                        </Expander.Tag>

                        <Button Command="{x:Bind viewModel.IFileSystem_FileWritableCommand}" Content="Test Method" />
                    </Expander>

                    <Expander
                        HorizontalAlignment="Stretch"
                        VerticalAlignment="Top"
                        Header="CopyFile()|[Obsolete: Not recommended: Use asnyc method]  Copies a file to another destination"
                        Template="{StaticResource CardExpander}">
                        <Expander.Tag>
                            <StackPanel Spacing="8">
                                <ContentControl Tag="path|[Type: string]  The path to the file to copy" Template="{StaticResource SettingsCard}">
                                    <TextBox
                                        MinWidth="400"
                                        MaxWidth="500"
                                        Text="{x:Bind viewModel.IFileSystem_path, Mode=TwoWay}" />
                                </ContentControl>

                                <ContentControl Tag="destination|[Type: string]  The path to the destination the file should be copied" Template="{StaticResource SettingsCard}">
                                    <TextBox
                                        MinWidth="400"
                                        MaxWidth="500"
                                        Text="{x:Bind viewModel.IFileSystem_destination, Mode=TwoWay}" />
                                </ContentControl>

                                <ContentControl Tag="overwrite|[Type: bool]  The boolean wether the original file should get overwritten if it exists" Template="{StaticResource SettingsCard}">
                                    <ToggleSwitch IsOn="{x:Bind viewModel.IFileSystem_overwrite, Mode=TwoWay}" />
                                </ContentControl>
                            </StackPanel>
                        </Expander.Tag>

                        <Button Command="{x:Bind viewModel.IFileSystem_CopyFileCommand}" Content="Test Method" />
                    </Expander>

                    <Expander
                        HorizontalAlignment="Stretch"
                        VerticalAlignment="Top"
                        Header="CopyFileAsync()|Copies a file asynchronously to another destination"
                        Template="{StaticResource CardExpander}">
                        <Expander.Tag>
                            <StackPanel Spacing="8">
                                <ContentControl Tag="path|[Type: string]  The path to the file to copy" Template="{StaticResource SettingsCard}">
                                    <TextBox
                                        MinWidth="400"
                                        MaxWidth="500"
                                        Text="{x:Bind viewModel.IFileSystem_path, Mode=TwoWay}" />
                                </ContentControl>

                                <ContentControl Tag="destination|[Type: string]  The path to the destination the file should be copied" Template="{StaticResource SettingsCard}">
                                    <TextBox
                                        MinWidth="400"
                                        MaxWidth="500"
                                        Text="{x:Bind viewModel.IFileSystem_destination, Mode=TwoWay}" />
                                </ContentControl>

                                <ContentControl Tag="overwrite|[Type: bool]  The boolean wether the original file should get overwritten if it exists" Template="{StaticResource SettingsCard}">
                                    <ToggleSwitch IsOn="{x:Bind viewModel.IFileSystem_overwrite, Mode=TwoWay}" />
                                </ContentControl>
                            </StackPanel>
                        </Expander.Tag>

                        <StackPanel Orientation="Horizontal" Spacing="8">
                            <Button Command="{x:Bind viewModel.IFileSystem_CopyFileACommand}" Content="Test Method" />
                            <Button
                                Command="{x:Bind viewModel.IFileSystem_CopyFileACancelCommand}"
                                Content="Cancel Method"
                                ToolTipService.ToolTip="The token to cancel the operation" />
                        </StackPanel>
                    </Expander>

                    <Expander
                        HorizontalAlignment="Stretch"
                        VerticalAlignment="Top"
                        Header="DeleteFile()|[Obsolete: Not recommended: Use asnyc method]  Deletes a file"
                        Template="{StaticResource CardExpander}">
                        <Expander.Tag>
                            <ContentControl Tag="path|[Type: string]  The path to the file to delete to" Template="{StaticResource SettingsCard}">
                                <TextBox
                                    MinWidth="400"
                                    MaxWidth="500"
                                    Text="{x:Bind viewModel.IFileSystem_path, Mode=TwoWay}" />
                            </ContentControl>
                        </Expander.Tag>

                        <Button Command="{x:Bind viewModel.IFileSystem_DeleteFileCommand}" Content="Test Method" />
                    </Expander>

                    <Expander
                        HorizontalAlignment="Stretch"
                        VerticalAlignment="Top"
                        Header="DeleteFileAsync()|Deletes a file asynchronously"
                        Template="{StaticResource CardExpander}">
                        <Expander.Tag>
                            <StackPanel Spacing="8">
                                <ContentControl Tag="path|[Type: string]  The path to the file to delete to" Template="{StaticResource SettingsCard}">
                                    <TextBox
                                        MinWidth="400"
                                        MaxWidth="500"
                                        Text="{x:Bind viewModel.IFileSystem_path, Mode=TwoWay}" />
                                </ContentControl>

                                <ContentControl Tag="timeout|[Type: int]  The time in ms until the operation times out" Template="{StaticResource SettingsCard}">
                                    <NumberBox SpinButtonPlacementMode="Compact" Value="{x:Bind viewModel.IFileSystem_timeout, Mode=TwoWay}" />
                                </ContentControl>
                            </StackPanel>
                        </Expander.Tag>

                        <StackPanel Orientation="Horizontal" Spacing="8">
                            <Button Command="{x:Bind viewModel.IFileSystem_DeleteFileACommand}" Content="Test Method" />
                            <Button
                                Command="{x:Bind viewModel.IFileSystem_DeleteFileACancelCommand}"
                                Content="Cancel Method"
                                ToolTipService.ToolTip="The token to cancel the operation" />
                        </StackPanel>
                    </Expander>

                    <Expander
                        HorizontalAlignment="Stretch"
                        VerticalAlignment="Top"
                        Header="WaitForFileLockAsync()|[Returns: bool]  Waits for a file lock a asynchronously"
                        Template="{StaticResource CardExpander}">
                        <Expander.Tag>
                            <StackPanel Spacing="8">
                                <ContentControl Tag="path|[Type: string]  The path to the file to check" Template="{StaticResource SettingsCard}">
                                    <TextBox
                                        MinWidth="400"
                                        MaxWidth="500"
                                        Text="{x:Bind viewModel.IFileSystem_path, Mode=TwoWay}" />
                                </ContentControl>

                                <ContentControl Tag="timeout|[Type: int]  The time in ms until the operation times out" Template="{StaticResource SettingsCard}">
                                    <NumberBox SpinButtonPlacementMode="Compact" Value="{x:Bind viewModel.IFileSystem_timeout, Mode=TwoWay}" />
                                </ContentControl>
                            </StackPanel>
                        </Expander.Tag>

                        <StackPanel Orientation="Horizontal" Spacing="8">
                            <ProgressRing IsActive="{x:Bind viewModel.IFileSystem_WaitForFileLockCommand.IsRunning, Mode=OneWay}" />
                            <Button Command="{x:Bind viewModel.IFileSystem_WaitForFileLockCommand}" Content="Test Method" />
                            <Button
                                Command="{x:Bind viewModel.IFileSystem_WaitForFileLockCancelCommand}"
                                Content="Cancel Method"
                                ToolTipService.ToolTip="The token to cancel the operation" />
                        </StackPanel>
                    </Expander>

                    <Expander
                        HorizontalAlignment="Stretch"
                        VerticalAlignment="Top"
                        Header="ReadAsTextAsync()|[Returns: string]  Reads a file as text asynchronously"
                        Template="{StaticResource CardExpander}">
                        <Expander.Tag>
                            <ContentControl Tag="path|[Type: string]  The path to read as text" Template="{StaticResource SettingsCard}">
                                <TextBox
                                    MinWidth="400"
                                    MaxWidth="500"
                                    Text="{x:Bind viewModel.IFileSystem_path, Mode=TwoWay}" />
                            </ContentControl>
                        </Expander.Tag>

                        <StackPanel Orientation="Horizontal" Spacing="8">
                            <Button Command="{x:Bind viewModel.IFileSystem_ReadAsTextCommand}" Content="Test Method" />
                            <Button
                                Command="{x:Bind viewModel.IFileSystem_ReadAsTextCancelCommand}"
                                Content="Cancel Method"
                                ToolTipService.ToolTip="The token to cancel the operation" />
                        </StackPanel>
                    </Expander>

                    <Expander
                        HorizontalAlignment="Stretch"
                        VerticalAlignment="Top"
                        Header="SaveAsTextAsync()|Saves a string to a file as text asynchronously"
                        Template="{StaticResource CardExpander}">
                        <Expander.Tag>
                            <StackPanel Spacing="8">
                                <ContentControl Tag="path|[Type: string]  The path to the file the content should get written to" Template="{StaticResource SettingsCard}">
                                    <TextBox
                                        MinWidth="400"
                                        MaxWidth="500"
                                        Text="{x:Bind viewModel.IFileSystem_path, Mode=TwoWay}" />
                                </ContentControl>

                                <ContentControl Tag="content|[Type: string]  The content which will be written to the file" Template="{StaticResource SettingsCard}">
                                    <TextBox
                                        MinWidth="400"
                                        MaxWidth="500"
                                        Text="{x:Bind viewModel.IFileSystem_content, Mode=TwoWay}" />
                                </ContentControl>

                                <ContentControl Tag="overwrite|[Type: bool]  The boolean wether the original file should get overwritten if it exists" Template="{StaticResource SettingsCard}">
                                    <ToggleSwitch IsOn="{x:Bind viewModel.IFileSystem_overwrite, Mode=TwoWay}" />
                                </ContentControl>
                            </StackPanel>
                        </Expander.Tag>

                        <StackPanel Orientation="Horizontal" Spacing="8">
                            <Button Command="{x:Bind viewModel.IFileSystem_SaveAsTextCommand}" Content="Test Method" />
                            <Button
                                Command="{x:Bind viewModel.IFileSystem_SaveAsTextCancelCommand}"
                                Content="Cancel Method"
                                ToolTipService.ToolTip="The token to cancel the operation" />
                        </StackPanel>
                    </Expander>

                    <Expander
                        HorizontalAlignment="Stretch"
                        VerticalAlignment="Top"
                        Header="DirectoryExists()|[Returns: bool]  Checks wether a directory exists"
                        Template="{StaticResource CardExpander}">
                        <Expander.Tag>
                            <ContentControl Tag="path|[Type: string]  The path to the directory to check" Template="{StaticResource SettingsCard}">
                                <TextBox
                                    MinWidth="400"
                                    MaxWidth="500"
                                    Text="{x:Bind viewModel.IFileSystem_path, Mode=TwoWay}" />
                            </ContentControl>
                        </Expander.Tag>

                        <Button Command="{x:Bind viewModel.IFileSystem_DirectoryExistsCommand}" Content="Test Method" />
                    </Expander>

                    <Expander
                        HorizontalAlignment="Stretch"
                        VerticalAlignment="Top"
                        Header="DirectoryWritable()|[Returns: bool]  Checks wether a directory is writeable"
                        Template="{StaticResource CardExpander}">
                        <Expander.Tag>
                            <ContentControl Tag="path|[Type: string]  The path to the directory to check" Template="{StaticResource SettingsCard}">
                                <TextBox
                                    MinWidth="400"
                                    MaxWidth="500"
                                    Text="{x:Bind viewModel.IFileSystem_path, Mode=TwoWay}" />
                            </ContentControl>
                        </Expander.Tag>

                        <Button Command="{x:Bind viewModel.IFileSystem_DirectoryWritableCommand}" Content="Test Method" />
                    </Expander>

                    <Expander
                        HorizontalAlignment="Stretch"
                        VerticalAlignment="Top"
                        Header="CreateDirectory()|Creates a new directory"
                        Template="{StaticResource CardExpander}">
                        <Expander.Tag>
                            <ContentControl Tag="path|[Type: string]  The path to the directory to create to" Template="{StaticResource SettingsCard}">
                                <TextBox
                                    MinWidth="400"
                                    MaxWidth="500"
                                    Text="{x:Bind viewModel.IFileSystem_path, Mode=TwoWay}" />
                            </ContentControl>
                        </Expander.Tag>

                        <Button Command="{x:Bind viewModel.IFileSystem_CreateDirectoryCommand}" Content="Test Method" />
                    </Expander>
                </StackPanel>
            </ScrollViewer>
        </TabViewItem>

    </TabView>
</Page>
